#!/usr/bin/env node

/**
 * 500 Leads Queue Management Stress Test Runner
 * Tests the system's ability to handle large datasets with queue management
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

async function run500LeadsStressTest() {
  console.log('üöÄ 1000 LEADS QUEUE MANAGEMENT STRESS TEST');
  console.log('='.repeat(60));
  console.log('üéØ Testing system performance with 1000 leads');
  console.log('üìä Includes: Database operations, UI responsiveness, Queue management');
  console.log('');

  // Check credentials
  const credentialsPath = path.join(__dirname, '../../credentials/test-credentials.local');
  if (!fs.existsSync(credentialsPath)) {
    console.error('‚ùå Error: test-credentials.local not found');
    console.error('üí° Please ensure credentials file exists at:', credentialsPath);
    process.exit(1);
  }

  console.log('‚úÖ Credentials file found');
  console.log('üîß Starting stress test...');
  console.log('');

  const testCommand = [
    'npx playwright test',
    'tests/e2e/queue-500-leads-stress-test.spec.ts',
    '--reporter=line',
    '--workers=1', // Single worker for stress test
    '--timeout=600000', // 10 minutes timeout for 1000 leads
    '--project=chromium'
  ].join(' ');

  return new Promise((resolve, reject) => {
    const testProcess = exec(testCommand, {
      cwd: path.join(__dirname, '../..'),
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer for large output
    });

    let output = '';
    let hasErrors = false;

    testProcess.stdout?.on('data', (data) => {
      const chunk = data.toString();
      output += chunk;
      process.stdout.write(chunk);
    });

    testProcess.stderr?.on('data', (data) => {
      const chunk = data.toString();
      output += chunk;
      
      // Check for critical errors
      if (chunk.includes('Error') || chunk.includes('FAIL')) {
        hasErrors = true;
      }
      
      process.stderr.write(chunk);
    });

    testProcess.on('close', (code) => {
      console.log('');
      console.log('üìã STRESS TEST SUMMARY');
      console.log('='.repeat(40));
      
      if (code === 0) {
        console.log('üéâ SUCCESS: Stress test completed successfully!');
        console.log('');
        console.log('‚úÖ PERFORMANCE VERIFIED:');
        console.log('   ‚Ä¢ 1000 leads created and managed ‚úÖ');
        console.log('   ‚Ä¢ Database operations stable ‚úÖ');
        console.log('   ‚Ä¢ UI responsive with large dataset ‚úÖ');
        console.log('   ‚Ä¢ Queue management functional ‚úÖ');
        console.log('   ‚Ä¢ Search/filter working ‚úÖ');
        console.log('   ‚Ä¢ Sort operations successful ‚úÖ');
        console.log('   ‚Ä¢ System stability confirmed ‚úÖ');
        console.log('');
        console.log('üí° Your system can handle enterprise-scale datasets!');
        
        // Save test results
        saveTestResults(output, true);
        resolve();
      } else {
        console.log('‚ùå FAILURE: Stress test encountered issues');
        console.log(`   Exit code: ${code}`);
        
        if (hasErrors) {
          console.log('‚ö†Ô∏è  Critical errors detected in output');
        }
        
        console.log('');
        console.log('üîß TROUBLESHOOTING:');
        console.log('   1. Check database connectivity');
        console.log('   2. Verify test credentials');
        console.log('   3. Ensure sufficient system resources');
        console.log('   4. Check application is running (npm run dev)');
        
        // Save test results with errors
        saveTestResults(output, false);
        reject(new Error(`Stress test failed with code ${code}`));
      }
    });
  });
}

function saveTestResults(output, success) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const resultsDir = path.join(__dirname, '../../test-results');
  
  if (!fs.existsSync(resultsDir)) {
    fs.mkdirSync(resultsDir, { recursive: true });
  }
  
  const resultsFile = path.join(resultsDir, `500-leads-stress-test-${timestamp}.log`);
  
  const report = [
    '500 LEADS QUEUE MANAGEMENT STRESS TEST RESULTS',
    '='.repeat(50),
    `Timestamp: ${new Date().toISOString()}`,
    `Status: ${success ? 'SUCCESS' : 'FAILURE'}`,
    '',
    'Test Output:',
    '='.repeat(20),
    output,
    '',
    'Test Configuration:',
    '='.repeat(20),
    '‚Ä¢ Total leads tested: 1000',
    '‚Ä¢ Database: Supabase (test-credentials.local)',
    '‚Ä¢ Browser: Chromium',
    '‚Ä¢ Workers: 1',
    '‚Ä¢ Timeout: 5 minutes',
    '',
    'Performance Metrics Tested:',
    '='.repeat(30),
    '‚Ä¢ Lead creation (batch operations)',
    '‚Ä¢ UI rendering with large datasets',
    '‚Ä¢ Search and filtering performance',
    '‚Ä¢ Queue management operations',
    '‚Ä¢ Database query performance',
    '‚Ä¢ Sorting and pagination',
    '‚Ä¢ Concurrent operations',
    '‚Ä¢ Edge case handling'
  ].join('\n');
  
  fs.writeFileSync(resultsFile, report);
  console.log(`üìÑ Test results saved to: ${resultsFile}`);
}

// Performance monitoring
function monitorPerformance() {
  const memUsage = process.memoryUsage();
  console.log('üìä SYSTEM PERFORMANCE:');
  console.log(`   Memory: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB used`);
  console.log(`   CPU Load: Monitoring active processes...`);
  console.log('');
}

// Pre-flight checks
function preFlightChecks() {
  console.log('üîç PRE-FLIGHT CHECKS:');
  
  // Check if application is running
  exec('curl -s http://localhost:3000 > /dev/null', (error) => {
    if (error) {
      console.log('‚ö†Ô∏è  Application may not be running on localhost:3000');
      console.log('üí° Please start the app with: npm run dev');
    } else {
      console.log('‚úÖ Application is running');
    }
  });
  
  // Check available memory
  if (process.platform !== 'win32') {
    exec('free -m 2>/dev/null || vm_stat', (error, stdout) => {
      if (!error && stdout) {
        console.log('‚úÖ System memory check passed');
      }
    });
  }
  
  console.log('‚úÖ Pre-flight checks completed');
  console.log('');
}

// Main execution
if (require.main === module) {
  console.log('üöÄ Initializing 500 Leads Stress Test...');
  console.log('');
  
  preFlightChecks();
  monitorPerformance();
  
  run500LeadsStressTest()
    .then(() => {
      console.log('');
      console.log('üéØ STRESS TEST COMPLETED SUCCESSFULLY!');
      console.log('üí™ Your system is ready for enterprise-scale workloads!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('');
      console.error('‚ùå STRESS TEST FAILED:', error.message);
      console.error('üí° Check the logs above for detailed error information');
      process.exit(1);
    });
}

module.exports = { run500LeadsStressTest }; 