name: 'üîí Environment Validation Pipeline'

on:
  push:
    branches: [main, develop]
    paths:
      - '.env*'
      - 'src/config/**'
      - '.github/workflows/env-validation.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.9.0'

# Add permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  # TEMPORARILY DISABLED DUE TO BILLING ISSUES
  validate-env-structure:
    name: 'üîç Validate Environment Structure'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4

      - name: '‚öôÔ∏è Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'üì¶ Install Dependencies'
        run: npm ci --prefer-offline --no-audit

      - name: 'üîç Validate Environment Configuration'
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.VITE_SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "üîí Environment Validation Results" > env-validation-results.md
          echo "=================================" >> env-validation-results.md
          echo "" >> env-validation-results.md
          echo "**Validation Date:** $(date)" >> env-validation-results.md
          echo "**Branch:** ${{ github.ref_name }}" >> env-validation-results.md
          echo "**Commit:** ${{ github.sha }}" >> env-validation-results.md
          echo "" >> env-validation-results.md
          
          # Check if required environment variables are set
          echo "## üìã Environment Variables Check" >> env-validation-results.md
          echo "" >> env-validation-results.md
          
          if [ -n "${VITE_SUPABASE_URL:-}" ]; then
            echo "‚úÖ VITE_SUPABASE_URL: Set" >> env-validation-results.md
          else
            echo "‚ùå VITE_SUPABASE_URL: Missing" >> env-validation-results.md
          fi
          
          if [ -n "${VITE_SUPABASE_ANON_KEY:-}" ]; then
            echo "‚úÖ VITE_SUPABASE_ANON_KEY: Set" >> env-validation-results.md
          else
            echo "‚ùå VITE_SUPABASE_ANON_KEY: Missing" >> env-validation-results.md
          fi

      - name: 'üß™ Test Environment Loading'
        run: |
          echo "## üß™ Environment Loading Test" >> env-validation-results.md
          echo "" >> env-validation-results.md
          
          # Test if the app can load environment configuration
          node -e "
            try {
              const config = require('./src/config/env.ts');
              console.log('‚úÖ Environment configuration loaded successfully');
            } catch (error) {
              console.log('‚ùå Environment configuration failed to load:', error.message);
              process.exit(1);
            }
          " >> env-validation-results.md 2>&1 || echo "‚ùå Environment test failed" >> env-validation-results.md

      - name: 'üì§ Upload Validation Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: env-validation-results
          path: env-validation-results.md
          retention-days: 30

  security-check:
    name: 'üîê Security Configuration Check'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4

      - name: 'üîê Check for Exposed Secrets'
        run: |
          echo "üîê Security Check Results" > security-check-results.md
          echo "=========================" >> security-check-results.md
          echo "" >> security-check-results.md
          
          # Check for potential exposed secrets in code
          if grep -r "sk_" src/ 2>/dev/null; then
            echo "‚ùå CRITICAL: Potential secret key exposed in source code" >> security-check-results.md
            exit 1
          else
            echo "‚úÖ No exposed secret keys found" >> security-check-results.md
          fi
          
          # Check for hardcoded URLs
          if grep -r "http://localhost" src/ 2>/dev/null | grep -v "test" | grep -v "example"; then
            echo "‚ö†Ô∏è  Warning: Hardcoded localhost URLs found" >> security-check-results.md
          else
            echo "‚úÖ No hardcoded localhost URLs found" >> security-check-results.md
          fi

  generate-env-report:
    name: 'üìä Generate Environment Report'
    runs-on: ubuntu-latest
    needs: [validate-env-structure, security-check]
    if: always()
    
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4

      - name: '‚öôÔ∏è Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'üìä Generate Comprehensive Report'
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: |
          echo "# üîí Environment Validation Report" > ENV-VALIDATION-REPORT.md
          echo "" >> ENV-VALIDATION-REPORT.md
          echo "**Generated:** $(date)" >> ENV-VALIDATION-REPORT.md
          echo "**Repository:** ${{ github.repository }}" >> ENV-VALIDATION-REPORT.md
          echo "**Branch:** ${{ github.ref_name }}" >> ENV-VALIDATION-REPORT.md
          echo "**Commit:** ${{ github.sha }}" >> ENV-VALIDATION-REPORT.md
          echo "" >> ENV-VALIDATION-REPORT.md
          
          echo "## üìã Environment Status" >> ENV-VALIDATION-REPORT.md
          echo "" >> ENV-VALIDATION-REPORT.md
          echo "| Variable | Status | Notes |" >> ENV-VALIDATION-REPORT.md
          echo "|----------|---------|-------|" >> ENV-VALIDATION-REPORT.md
          
          # Check each required environment variable
          vars=("VITE_SUPABASE_URL" "VITE_SUPABASE_ANON_KEY")
          for var in "${vars[@]}"; do
            if [ -n "${!var:-}" ]; then
              echo "| $var | ‚úÖ Set | Available |" >> ENV-VALIDATION-REPORT.md
            else
              echo "| $var | ‚ùå Missing | Required for production |" >> ENV-VALIDATION-REPORT.md
            fi
          done

      - name: 'üìù Comment on PR'
        uses: actions/github-script@v7
        # Only run this step if the PR is from the same repository (not from a fork)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('ENV-VALIDATION-REPORT.md')) {
              const report = fs.readFileSync('ENV-VALIDATION-REPORT.md', 'utf8');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîí Environment Validation Results\n\n${report}`
              });
            }

      - name: 'üîÑ Update Status Check'
        uses: actions/github-script@v7
        # Only run this step if the PR is from the same repository (not from a fork)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        with:
          script: |
            const { VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY } = process.env;
            const allSet = VITE_SUPABASE_URL && VITE_SUPABASE_ANON_KEY;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: allSet ? 'success' : 'failure',
              description: allSet ? 'All environment variables configured' : 'Missing required environment variables',
              context: 'Environment Validation'
            });

      - name: 'üìä Generate Summary'
        uses: actions/github-script@v7
        with:
          script: |
            const { VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY } = process.env;
            
            core.summary
              .addHeading('üîí Environment Validation Summary')
              .addTable([
                [{data: 'Variable', header: true}, {data: 'Status', header: true}],
                ['VITE_SUPABASE_URL', VITE_SUPABASE_URL ? '‚úÖ Set' : '‚ùå Missing'],
                ['VITE_SUPABASE_ANON_KEY', VITE_SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing']
              ])
              .write(); 