
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  leads       Lead[]
  clientId    String   @map("client_id")
  client      Client   @relation(fields: [clientId], references: [id])
  owner       User?    @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId     String?  @map("owner_id")

  @@map("projects")
}

model Lead {
  id           String     @id @default(uuid())
  firstName    String     @map("first_name")
  lastName     String     @map("last_name")
  email        String
  phone        String?
  status       LeadStatus @default(NEW)
  temperature  Int        @default(0) // 0-100 scale for lead temperature
  source       String?
  notes        String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  projectId    String     @map("project_id")
  project      Project    @relation(fields: [projectId], references: [id])
  messages     Message[]
  meetings     Meeting[]

  @@unique([email, projectId])
  @@index([status])
  @@index([projectId])
  @@map("leads")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  direction MessageDirection
  channel   MessageChannel
  sentAt    DateTime @default(now()) @map("sent_at")
  status    MessageStatus @default(SENT)
  leadId    String   @map("lead_id")
  lead      Lead     @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([sentAt])
  @@map("messages")
}

model Meeting {
  id          String       @id @default(uuid())
  title       String
  description String?
  startTime   DateTime     @map("start_time")
  endTime     DateTime     @map("end_time")
  status      MeetingStatus @default(SCHEDULED)
  location    String?
  notes       String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  leadId      String       @map("lead_id")
  lead        Lead         @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([startTime])
  @@map("meetings")
}

model Client {
  id       String    @id @default(uuid())
  name     String?
  projects Project[]
  users    User[]

  @@map("clients")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  hashedPassword String?   @db.VarChar(255)
  name           String?
  role           UserRole  @default(STAFF)
  providerId     String?
  clientId       String    @map("client_id")
  client         Client    @relation(fields: [clientId], references: [id])
  projectsOwned  Project[] @relation("OwnedProjects")
  status         UserStatus @default(PENDING)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
}

enum UserStatus {
  ACTIVE
  PENDING
  REJECTED
}

enum LeadStatus {
  NEW
  CONTACTED
  INTERESTED
  NOT_INTERESTED
  MEETING_SCHEDULED
  CLOSED_WON
  CLOSED_LOST
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageChannel {
  EMAIL
  SMS
  WHATSAPP
  CALL
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum MeetingStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELED
  NO_SHOW
}
